// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?   @db.Text
  password      String?   @db.Text
  image         File?
  phone         Int?      @db.Int
  gender        String?   @db.Text
  isAdmin       Boolean?  @default(false)
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  emailVerified DateTime?
  reviews       Review[]
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  cart          Cart[]
  address       Address?
}

model Product {
  id           String         @id @default(cuid())
  name         String         @unique
  category     String?        @db.Text
  discount     Int?
  descriptions String?        @db.LongText
  sizeList     Size[]
  sold         Int?
  slug         String         @unique
  files        File[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  reviews      Review[]
  orderId      String?
  cart         Cart[]
  productOrder ProductOrder[]

  @@index([orderId])
}

model File {
  id        String   @id @default(cuid())
  url       String?
  publicId  String?
  type      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @unique
  productId String?

  @@index([productId])
}

model Review {
  id        String   @id @default(cuid())
  content   String
  point     Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Size {
  id           String         @id @default(cuid())
  name         String?
  price        Int?
  product      Product?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  amount       Int?
  productId    String?
  cart         Cart[]
  ProductOrder ProductOrder[]

  @@index([productId])
}

model Cart {
  size      Size?    @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  amount    Int?
  userId    String
  productId String
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  sizeId    String

  @@id([userId, productId])
  @@index([productId])
  @@index([userId])
  @@index([sizeId])
}

model Order {
  id        String         @id @default(cuid())
  products  ProductOrder[]
  user      User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  status    Status?
  total     Int?
  feeShip   Int?
  message   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([userId])
}

model ProductOrder {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  amount    Int?
  size      Size?   @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  sizeId    String?
  order     Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String?

  @@index([productId])
  @@index([orderId])
  @@index([sizeId])
}

model Address {
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String  @unique
  provinceId Int?
  districtId Int?
  wardId     Int?
  street     String?
}

enum Status {
  PENDING
  FULFILLED
  REJECTED
  PREPARING
  DELIVERING
  SUCCESS
  FAILED
}
